//=============================================================================
//
// エネミー処理 [enemy.cpp]
// Author : 麦英泳
//
//=============================================================================
#include "enemy.h"
#include "shadow.h"
#include "debugproc.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

//*****************************************************************************
// グローバル変数
//*****************************************************************************
Character				g_enemy;					// エネミーのクラス

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT InitEnemy(void)
{
	return g_enemy.Init(OBJECT_ENEMY);
}

//=============================================================================
// 終了処理
//=============================================================================
void UninitEnemy(void)
{
	for (int i = 0; i < PART_MAX; i++)	//i:パーツ番号
	{
		SAFE_RELEASE(g_enemy.part[i].pMesh);
		SAFE_RELEASE(g_enemy.part[i].pMatBuff);	
	}

}

//=============================================================================
// 更新処理
//=============================================================================
void UpdateEnemy(void)
{
	g_enemy.UpdateCharacter();

	//PrintDebugProc("AIのup ：%d \n", g_up);
	//PrintDebugProc("AIのdown ：%d \n", g_down);
	//PrintDebugProc("AIのleft ：%d \n", g_left);
	//PrintDebugProc("AIのright ：%d \n", g_right);

}									  

//=============================================================================
// 描画処理
//=============================================================================
void DrawEnemy(void)
{
	LPDIRECT3DDEVICE9 pDevice = GetDevice();

	DrawXMODEL(pDevice, g_enemy.part, PART_MAX);

}

//=============================================================================
// エネミーを取得
//=============================================================================
Character *GetEnemy(void)
{
	return &g_enemy;
}

//=============================================================================
// 位置取得
//=============================================================================
D3DXVECTOR3 GetPositionEnemy(void)
{
	return g_enemy.part[0].srt.pos;//体(part[0])を基準に
}
